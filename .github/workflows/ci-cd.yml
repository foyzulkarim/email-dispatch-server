name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_SERVER: ${{ github.repository }}-server
  IMAGE_NAME_CLIENT: ${{ github.repository }}-client

jobs:
  # Test jobs
  test-server:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7-jammy
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
        ports:
          - 27017:27017
      rabbitmq:
        image: rabbitmq:3-alpine
        env:
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: password123
        ports:
          - 5672:5672

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    
    - name: Install server dependencies
      working-directory: ./server
      run: npm ci
    
    - name: Run server tests
      working-directory: ./server
      run: npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://admin:password123@localhost:27017/email_service_test?authSource=admin
        RABBITMQ_URL: amqp://admin:password123@localhost:5672
    
    - name: Upload server test coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./server/coverage/lcov.info
        flags: server

  test-client:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install client dependencies
      working-directory: ./client
      run: npm ci
    
    - name: Run client linting
      working-directory: ./client
      run: npm run lint
    
    - name: Build client
      working-directory: ./client
      run: npm run build

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [test-server, test-client]
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # TODO: Enable these jobs when Docker account and VPS are ready
  
  # # Build and push Docker images
  # build-and-push:
  #   runs-on: ubuntu-latest
  #   needs: [test-server, test-client, security-scan]
  #   if: github.event_name == 'push'
  #   permissions:
  #     contents: read
  #     packages: write
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
  #   
  #   - name: Log in to Container Registry
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ${{ env.REGISTRY }}
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}
  #   
  #   - name: Extract metadata for server
  #     id: meta-server
  #     uses: docker/metadata-action@v5
  #     with:
  #       images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_SERVER }}
  #       tags: |
  #         type=ref,event=branch
  #         type=ref,event=pr
  #         type=sha,prefix={{branch}}-
  #         type=raw,value=latest,enable={{is_default_branch}}
  #   
  #   - name: Extract metadata for client
  #     id: meta-client
  #     uses: docker/metadata-action@v5
  #     with:
  #       images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}
  #       tags: |
  #         type=ref,event=branch
  #         type=ref,event=pr
  #         type=sha,prefix={{branch}}-
  #         type=raw,value=latest,enable={{is_default_branch}}
  #   
  #   - name: Build and push server image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: ./server
  #       target: production
  #       push: true
  #       tags: ${{ steps.meta-server.outputs.tags }}
  #       labels: ${{ steps.meta-server.outputs.labels }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max
  #   
  #   - name: Build and push client image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: ./client
  #       target: production
  #       push: true
  #       tags: ${{ steps.meta-client.outputs.tags }}
  #       labels: ${{ steps.meta-client.outputs.labels }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

  # # Deploy to VPS
  # deploy-production:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Deploy to VPS
  #     uses: appleboy/ssh-action@v1.0.0
  #     with:
  #       host: ${{ secrets.VPS_HOST }}
  #       username: ${{ secrets.VPS_USERNAME }}
  #       key: ${{ secrets.VPS_SSH_KEY }}
  #       port: ${{ secrets.VPS_PORT }}
  #       script: |
  #         # Navigate to deployment directory
  #         cd /opt/email-dispatcher
  #         
  #         # Pull latest code
  #         git pull origin main
  #         
  #         # Pull latest Docker images
  #         echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
  #         docker compose -f docker-compose.prod.yml pull
  #         
  #         # Update containers with zero-downtime deployment
  #         docker compose -f docker-compose.prod.yml up -d --remove-orphans
  #         
  #         # Clean up old images
  #         docker image prune -f
  #         
  #         # Health check
  #         sleep 30
  #         curl -f http://localhost/health || exit 1
  #         
  #         echo "Deployment completed successfully"

  # # Deploy to staging
  # deploy-staging:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: github.ref == 'refs/heads/develop'
  #   environment: staging
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Deploy to Staging VPS
  #     uses: appleboy/ssh-action@v1.0.0
  #     with:
  #       host: ${{ secrets.STAGING_VPS_HOST }}
  #       username: ${{ secrets.VPS_USERNAME }}
  #       key: ${{ secrets.VPS_SSH_KEY }}
  #       port: ${{ secrets.VPS_PORT }}
  #       script: |
  #         # Navigate to staging deployment directory
  #         cd /opt/email-dispatcher-staging
  #         
  #         # Pull latest code
  #         git pull origin develop
  #         
  #         # Pull latest Docker images
  #         echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
  #         docker compose -f docker-compose.prod.yml pull
  #         
  #         # Update containers
  #         docker compose -f docker-compose.prod.yml up -d --remove-orphans
  #         
  #         # Clean up old images
  #         docker image prune -f
  #         
  #         echo "Staging deployment completed successfully" 
